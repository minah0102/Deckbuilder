{"ast":null,"code":"var _jsxFileName = \"/home/minahk/coursework/deckbuilder/src/index.js\",\n    _s = $RefreshSig$();\n\n//import React from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\nimport React, { useState } from 'react';\nimport { DeckList, SearchBar, SearchResults } from './components';\nimport { fetchCards } from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  fetchCards().then(console.log);\n  const [results, setResults] = useState([]);\n  const [deck, setDeck] = useState([]);\n\n  const addCardToDeck = ({\n    id,\n    name\n  }) => {\n    const nextDeck = [...deck]; // make a duplicate first\n\n    const index = nextDeck.findIndex(card => card.id === id); // index will be -1 if it is not found\n\n    if (index > -1) {\n      nextDeck[index].count += 1;\n    } else {\n      nextDeck.push({\n        id,\n        name,\n        count: 1\n      });\n    }\n\n    setDeck(nextDeck);\n  };\n\n  const removeCardFromDeck = ({\n    id\n  }) => {\n    const nextDeck = [...deck];\n    const index = nextDeck.findIndex(card => card.id === id);\n\n    if (index === -1) {\n      // don't do anything if we're trying to remove a card not in the deck\n      return;\n    }\n\n    if (nextDeck[index].count === 1) {\n      // remove the card altogether\n      nextDeck.splice(index, 1);\n    } else {\n      // decrement the count\n      nextDeck[index].count -= 1;\n    }\n\n    setDeck(nextDeck);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n      setResults: setResults\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchResults, {\n      results: results,\n      addCardToDeck: addCardToDeck,\n      removeCardFromDeck: removeCardFromDeck\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DeckList, {\n      deck: deck\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"lfqvKca5TFDYn1bT4iEiIXohL7k=\");\n\n_c = App;\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 74,\n  columnNumber: 3\n}, this), document.getElementById('root'));\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/minahk/coursework/deckbuilder/src/index.js"],"names":["ReactDOM","axios","React","useState","DeckList","SearchBar","SearchResults","fetchCards","App","then","console","log","results","setResults","deck","setDeck","addCardToDeck","id","name","nextDeck","index","findIndex","card","count","push","removeCardFromDeck","splice","render","document","getElementById"],"mappings":";;;AAAA;AACA,OAAOA,QAAP,MAAqB,WAArB;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SACEC,QADF,EAEEC,SAFF,EAGEC,aAHF,QAIO,cAJP;AAMA,SACEC,UADF,QAEO,OAFP;;;AAIA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChBD,EAAAA,UAAU,GAAGE,IAAb,CAAkBC,OAAO,CAACC,GAA1B;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,EAAD,CAAhC;;AAEA,QAAMa,aAAa,GAAG,CAAC;AAAEC,IAAAA,EAAF;AAAMC,IAAAA;AAAN,GAAD,KAAkB;AACtC,UAAMC,QAAQ,GAAG,CAAC,GAAGL,IAAJ,CAAjB,CADsC,CACV;;AAC5B,UAAMM,KAAK,GAAGD,QAAQ,CAACE,SAAT,CAAmBC,IAAI,IAAIA,IAAI,CAACL,EAAL,KAAYA,EAAvC,CAAd,CAFsC,CAItC;;AACA,QAAIG,KAAK,GAAG,CAAC,CAAb,EAAgB;AACdD,MAAAA,QAAQ,CAACC,KAAD,CAAR,CAAgBG,KAAhB,IAAyB,CAAzB;AACD,KAFD,MAEO;AACLJ,MAAAA,QAAQ,CAACK,IAAT,CAAc;AACZP,QAAAA,EADY;AAEZC,QAAAA,IAFY;AAGZK,QAAAA,KAAK,EAAE;AAHK,OAAd;AAKD;;AAEDR,IAAAA,OAAO,CAACI,QAAD,CAAP;AACD,GAhBD;;AAkBA,QAAMM,kBAAkB,GAAG,CAAC;AAAER,IAAAA;AAAF,GAAD,KAAY;AACrC,UAAME,QAAQ,GAAG,CAAC,GAAGL,IAAJ,CAAjB;AACA,UAAMM,KAAK,GAAGD,QAAQ,CAACE,SAAT,CAAmBC,IAAI,IAAIA,IAAI,CAACL,EAAL,KAAYA,EAAvC,CAAd;;AAEA,QAAIG,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB;AACA;AACD;;AAED,QAAID,QAAQ,CAACC,KAAD,CAAR,CAAgBG,KAAhB,KAA0B,CAA9B,EAAiC;AAC/B;AACAJ,MAAAA,QAAQ,CAACO,MAAT,CAAgBN,KAAhB,EAAuB,CAAvB;AACD,KAHD,MAGO;AACL;AACAD,MAAAA,QAAQ,CAACC,KAAD,CAAR,CAAgBG,KAAhB,IAAyB,CAAzB;AACD;;AAEDR,IAAAA,OAAO,CAACI,QAAD,CAAP;AACD,GAlBD;;AAoBA,sBACE;AAAK,IAAA,EAAE,EAAC,KAAR;AAAA,4BACE,QAAC,SAAD;AAAW,MAAA,UAAU,EAAEN;AAAvB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,aAAD;AACE,MAAA,OAAO,EAAED,OADX;AAEE,MAAA,aAAa,EAAEI,aAFjB;AAGE,MAAA,kBAAkB,EAAES;AAHtB;AAAA;AAAA;AAAA;AAAA,YAFF,eAME,QAAC,QAAD;AAAU,MAAA,IAAI,EAAEX;AAAhB;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CArDD;;GAAMN,G;;KAAAA,G;AAuDNR,QAAQ,CAAC2B,MAAT,eACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,QADF,EAEEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAFF","sourcesContent":["//import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport axios from 'axios';\n\nimport React, { useState } from 'react';\n\nimport {\n  DeckList,\n  SearchBar,\n  SearchResults\n} from './components';\n\nimport {\n  fetchCards,\n} from './api';\n\nconst App = () => {\n  fetchCards().then(console.log);\n  const [results, setResults] = useState([]);\n  const [deck, setDeck] = useState([]);\n\n  const addCardToDeck = ({ id, name }) => {\n    const nextDeck = [...deck]; // make a duplicate first\n    const index = nextDeck.findIndex(card => card.id === id);\n  \n    // index will be -1 if it is not found\n    if (index > -1) {\n      nextDeck[index].count += 1;\n    } else {\n      nextDeck.push({\n        id,\n        name,\n        count: 1\n      });\n    }\n  \n    setDeck(nextDeck);\n  }\n  \n  const removeCardFromDeck = ({ id }) => {\n    const nextDeck = [...deck];\n    const index = nextDeck.findIndex(card => card.id === id);\n  \n    if (index === -1) {\n      // don't do anything if we're trying to remove a card not in the deck\n      return;\n    }\n  \n    if (nextDeck[index].count === 1) {\n      // remove the card altogether\n      nextDeck.splice(index, 1);\n    } else {\n      // decrement the count\n      nextDeck[index].count -= 1;\n    }\n  \n    setDeck(nextDeck);\n  }\n\n  return (\n    <div id=\"app\">\n      <SearchBar setResults={setResults} />\n      <SearchResults\n        results={results}\n        addCardToDeck={addCardToDeck}\n        removeCardFromDeck={removeCardFromDeck} />\n      <DeckList deck={deck} />\n    </div>\n  );\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"]},"metadata":{},"sourceType":"module"}